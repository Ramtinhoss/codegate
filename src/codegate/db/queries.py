# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: queries.sql
import pydantic
from typing import Any, AsyncIterator, Iterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from codegate.db import models


GET_ALERTS_WITH_PROMPT_AND_OUTPUT = """-- name: get_alerts_with_prompt_and_output \\:many
SELECT 
    a.id, a.prompt_id, a.code_snippet, a.trigger_string, a.trigger_type, a.trigger_category, a.timestamp,
    p.timestamp as prompt_timestamp,
    p.provider,
    p.request,
    p.type,
    o.id as output_id,
    o.output,
    o.timestamp as output_timestamp
FROM alerts a
LEFT JOIN prompts p ON p.id = a.prompt_id
LEFT JOIN outputs o ON p.id = o.prompt_id
ORDER BY a.timestamp DESC
"""


class GetAlertsWithPromptAndOutputRow(pydantic.BaseModel):
    id: Any
    prompt_id: Any
    code_snippet: Optional[Any]
    trigger_string: Optional[Any]
    trigger_type: Any
    trigger_category: Optional[Any]
    timestamp: Any
    prompt_timestamp: Optional[Any]
    provider: Optional[Any]
    request: Optional[Any]
    type: Optional[Any]
    output_id: Optional[Any]
    output: Optional[Any]
    output_timestamp: Optional[Any]


GET_PROMPT_WITH_OUTPUTS = """-- name: get_prompt_with_outputs \\:many
SELECT 
    p.id, p.timestamp, p.provider, p.request, p.type,
    o.id as output_id,
    o.output,
    o.timestamp as output_timestamp
FROM prompts p
LEFT JOIN outputs o ON p.id = o.prompt_id
ORDER BY o.timestamp DESC
"""


class GetPromptWithOutputsRow(pydantic.BaseModel):
    id: Any
    timestamp: Any
    provider: Optional[Any]
    request: Any
    type: Any
    output_id: Optional[Any]
    output: Optional[Any]
    output_timestamp: Optional[Any]


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def get_alerts_with_prompt_and_output(self) -> Iterator[GetAlertsWithPromptAndOutputRow]:
        result = self._conn.execute(sqlalchemy.text(GET_ALERTS_WITH_PROMPT_AND_OUTPUT))
        for row in result:
            yield GetAlertsWithPromptAndOutputRow(
                id=row[0],
                prompt_id=row[1],
                code_snippet=row[2],
                trigger_string=row[3],
                trigger_type=row[4],
                trigger_category=row[5],
                timestamp=row[6],
                prompt_timestamp=row[7],
                provider=row[8],
                request=row[9],
                type=row[10],
                output_id=row[11],
                output=row[12],
                output_timestamp=row[13],
            )

    def get_prompt_with_outputs(self) -> Iterator[GetPromptWithOutputsRow]:
        result = self._conn.execute(sqlalchemy.text(GET_PROMPT_WITH_OUTPUTS))
        for row in result:
            yield GetPromptWithOutputsRow(
                id=row[0],
                timestamp=row[1],
                provider=row[2],
                request=row[3],
                type=row[4],
                output_id=row[5],
                output=row[6],
                output_timestamp=row[7],
            )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def get_alerts_with_prompt_and_output(
        self,
    ) -> AsyncIterator[GetAlertsWithPromptAndOutputRow]:
        result = await self._conn.stream(sqlalchemy.text(GET_ALERTS_WITH_PROMPT_AND_OUTPUT))
        async for row in result:
            yield GetAlertsWithPromptAndOutputRow(
                id=row[0],
                prompt_id=row[1],
                code_snippet=row[2],
                trigger_string=row[3],
                trigger_type=row[4],
                trigger_category=row[5],
                timestamp=row[6],
                prompt_timestamp=row[7],
                provider=row[8],
                request=row[9],
                type=row[10],
                output_id=row[11],
                output=row[12],
                output_timestamp=row[13],
            )

    async def get_prompt_with_outputs(self) -> AsyncIterator[GetPromptWithOutputsRow]:
        result = await self._conn.stream(sqlalchemy.text(GET_PROMPT_WITH_OUTPUTS))
        async for row in result:
            yield GetPromptWithOutputsRow(
                id=row[0],
                timestamp=row[1],
                provider=row[2],
                request=row[3],
                type=row[4],
                output_id=row[5],
                output=row[6],
                output_timestamp=row[7],
            )
